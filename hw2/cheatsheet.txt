    // Loops: break and continue 
            for (let i = 0; i < 10; i++) {
                if (i == 5) {
                    break;  // interrupts execution of the loop
                }
                console.log(i);
            }

            for (let i = 0; i < 10; i++) {
                if (i == 5) {
                    continue;  // skips the current iteration of the loop
                }
                console.log(i);
            }

            // For each DS, show how to create, add, remove, and iterate over it
            // Array (equivalent to a list)
            let arr = [1, 2, 3, 4, 5];
            arr.push(6);
            arr.pop();
            for (let i = 0; i < arr.length; i++) {
                console.log(arr[i]);
            }
            // Object (behaves similarly to a dictionary)
            let obj = {
                name: "John",
                age: 30,
                city: "New York"
            };
            obj["job"] = "Programmer";
            delete obj.city;
            for (let key in obj) {
                console.log(obj[key]);
            }
            // Set
            let set = new Set();
            set.add(1);
            set.add(2);
            set.add(3);
            set.add(4);
            set.add(5);
            set.add(6);
            set.delete(6);
            for (let item of set) {
                console.log(item);
            }
            // Map
            let map = new Map();
            map.set("name", "John");
            map.set("age", 30);
            map.set("city", "New York");
            map.set("job", "Programmer");
            map.delete("city");
            for (let [key, value] of map) {
                console.log(value);
            }
            // Stack
            let stack = [];
            stack.push(1);
            stack.push(2);
            stack.push(3);
            stack.push(4);
            stack.push(5);
            stack.push(6);
            stack.pop();
            for (let i = stack.length - 1; i >= 0; i--) {
                console.log(stack[i]);
            }
            // Queue
            let queue = [];
            queue.push(1);
            queue.push(2);
            queue.push(3);
            queue.push(4);
            queue.push(5);
            queue.push(6);
            queue.shift();
            for (let i = 0; i < queue.length; i++) {
                console.log(queue[i]);
            }
            // Linked List
            class Node {
                constructor(data) {
                    this.data = data;
                    this.next = null;
                }
            }
            class LinkedList {
                constructor() {
                    this.head = null;
                    this.size = 0;
                }
                add(data) {
                    let node = new Node(data);
                    let current;
                    if (this.head == null) {
                        this.head = node;
                    } else {
                        current = this.head;
                        while (current.next) {
                            current = current.next;
                        }
                        current.next = node;
                    }
                    this.size++;
                }
                remove(data) {
                    let current = this.head;
                    let prev = null;
                    while (current != null) {
                        if (current.data === data) {
                            if (prev == null) {
                                this.head = current.next;
                            } else {
                                prev.next = current.next;
                            }
                            this.size--;
                            return current.data;
                        }
                        prev = current;
                        current = current.next;
                    }
                    return -1;
                }
                print() {
                    let current = this.head;
                    while (current) {
                        console.log(current.data);
                        current = current.next;
                    }
                }
            }
            let list = new LinkedList();
            list.add(1);
            list.add(2);
            list.add(3);
            list.add(4);
            list.add(5);
            list.add(6);
            list.remove(6);
            list.print();
        
            </code>
        </pre>
        <p class="h4">
            same for c#:
        </p>
        <pre>
            <code>
                
// For loop
for (int i = 0; i < 10; i++)
{
    // Code to execute
}

// While loop
while (condition)
{
    // Code to execute
}

// Do-while loop
do
{
    // Code to execute
} while (condition);

// Foreach loop
foreach (var item in collection)
{
    // Code to execute
}

// Break statement
for (int i = 0; i < 10; i++)
{
    if (i == 5)
    {
        break;
    }
    // Code to execute
}

// Continue statement
for (int i = 0; i < 10; i++)
{
    if (i == 5)
    {
        continue;
    }
    // Code to execute
}

            </code>
        </pre>
        <p class="h4">
            Data Structure:
        </p>
        <pre>
            <code>
//Array             
// Declaration
int[] array = new int[5];

// Initialization
int[] array = { 1, 2, 3, 4, 5 };

// Accessing elements
int firstElement = array[0];
int lastElement = array[array.Length - 1];

// Looping through elements
for (int i = 0; i < array.Length; i++)
{
    int element = array[i];
    // Code to execute
}
//List

// Declaration
List list = new List();

// Adding elements
list.Add(1);
list.Add(2);
list.Add(3);

// Removing elements
list.Remove(2);

// Accessing elements
int firstElement = list[0];
int lastElement = list[list.Count - 1];

// Looping through elements
foreach (int element in list)
{
    // Code to execute
}
//Dictionary

// Declaration
Dictionary dictionary = new Dictionary();

// Adding elements
dictionary.Add("key1", 1);
dictionary.Add("key2", 2);
dictionary.Add("key3", 3);

// Removing elements
dictionary.Remove("key2");

// Accessing elements
int value = dictionary["key1"];

// Checking existence of key
bool exists = dictionary.ContainsKey("key1");

// Looping through elements
foreach (KeyValuePair pair in dictionary)
{
    string key = pair.Key;
    int value = pair.Value;
    // Code to execute
}

//Sorted List

// Declaration
SortedList sortedList = new SortedList();

// Adding elements
sortedList.Add("key1", 1);
sortedList.Add("key2", 2);
sortedList.Add("key3", 3);

// Removing elements
sortedList.Remove("key2");

// Accessing elements
int value = sortedList["key1"];

// Checking existence of key
bool exists = sortedList.ContainsKey("key1");

// Looping through elements
foreach (KeyValuePair pair in sortedList)
{
    string key = pair.Key;
    int value = pair.Value;
    // Code to execute
}

//HashSet

// Declaration
HashSet hashSet = new HashSet();

// Adding elements
hashSet.Add(1);
hashSet.Add(2);
hashSet.Add(3);

// Removing elements
hashSet.Remove(2);

// Checking existence of element
bool exists = hashSet.Contains(1);

// Looping through elements
foreach (int element in hashSet)
{
    // Code to execute
}

//Queue

// Declaration
Queue queue = new Queue();

// Adding elements
queue.Enqueue(1);
queue.Enqueue(2);
queue.Enqueue(3);

// Removing elements
int firstElement = queue.Dequeue();

// Accessing elements
int firstElement = queue.Peek();

// Checking existence of element
bool exists = queue.Contains(1);

// Looping through elements
foreach (int element in queue)
{
    // Code to execute
}

//Stack

// Declaration
Stack stack = new Stack();

// Adding elements
stack.Push(1);
stack.Push(2);
stack.Push(3);

// Removing elements
int lastElement = stack.Pop();

// Accessing elements
int lastElement = stack.Peek();

// Checking existence of element
bool exists = stack.Contains(1);

// Looping through elements
foreach (int element in stack)
{
    // Code to execute
}

//LinkedList

// Declaration
LinkedList linkedList = new LinkedList();

// Adding elements
linkedList.AddFirst(1);
linkedList.AddLast(3);
linkedList.AddAfter(linkedList.First, 2);

// Removing elements
linkedList.Remove(2);

// Accessing elements
int firstElement = linkedList.First.Value;
int lastElement = linkedList.Last.Value;

// Checking existence of element
bool exists = linkedList.Contains(1);

// Looping through elements
foreach (int element in linkedList)
{
    // Code to execute
}